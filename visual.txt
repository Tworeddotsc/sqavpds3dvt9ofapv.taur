In the instructions to create a "system drawn image",
the argument being made about the prediction is essentially at it's beginning.
Thus quantum relativity gets involved.
UN4 and ON4 are basically directional translators designed for mesuring branching in the repeating set of events that occur at local area
(repeating events are a branch of random number algorithm, the G.A.S.),
measured by the graph that is designed for either, terrain. Or "aviation" but the term has nothing to do with airplanes, or aircraft. 
It's just a term I use to describe the space where floating point operations in the system occur.


                                                                                      ______________________________________________________
                                  ____________________________                       |                                                      |
---------------------------------|                            |                      |                                                      |
                                 |   Random number generator  |----------------------|---.     GEOMETRIC ALGORITHM SHORTCUT FAMILY          |
                                 |           (1,10)           |                      |   |                                                  |
                                 |____________________________|                      |___|__________________________________________________|
										     |                           |                          |
                                                                                     |            UN4            |          ON4             |
                                                                                     |  Reaches the second point |  Reaches the first point |
                                                                                     |            (-0)           |          (+0)            |
                                                                                     |___._______________________|__________________________|
                                                                                         |
                                                                                    	 |
                                                                                       	 |
                                                                                       	 |
                                                                                      ___|________________________________
                                                                                     |                                    |
     ___________________________________________________________________             | CONSOLE OUTPUT REPEATING NUMBERS   |
    |                                                                   |            | ENVELOPING THE SECOND POINT ZERO,  |
    |                                                                   |            | AND RETURNING WITH THE DIRECTION   |
    |                        BEGIN SYSTEM DRAWING                       |------------|  OF RIGHT TOWARDS THE FIRST POINT. |
    |                                                                   |            |                                    |
    |___________________________________________________________________|            |____________________________________|
    |                               |                                   |
    |       PREDICTION OF           |     WRITING INTO THE STRUCTURE    |
    | FLOATING POINT OPERATIONS     |                                   |
    |                               |     {WIP}                         |
    |                               |     In my idea, a program will    |
    |Seemingly in the structure     |     theoretically "implement"     |
    |Of random math itself.         |     it's branches latest run.time |
    |                               |      by latest run of the un4.py  |
    |(It doesn't matter what random |     But we only need the first    |                  
    |numbers we choose to feed the  |     set of numbers until we reach |                     
    |geometric algorithm, the       |     a non-ending decimal, or if   |                     
    |output will always result in   |     the afformentioned non-ending |                     
    |the same repeating numbers.)   |     decimal is the first, we don't|
    |                               |     need any others, a simple     |
    |  The non-ending decimals      |     calculation will be made as   |
    |  Are all translated into steps|     seen in the second run of     |
    |  That are than put on a graph |     wlkro, than we get round.time |
    |  And each number will output  |     of when the event will occur  |
    |  an image. that is than merged|                                   |
    |  with the other instances,    |     In short terms, we will give  |
    |  creating an image,           |     the program an image that is  |
    |  a graph of all steps in      |     already drawn, and it will    |
    |  place on said graph,         |     "merge it" with the latest    |
    |                               |     time and run of geometric alg.|
    |  and at what time.            |                                   |
    |                               |                                   |
    |  If the place and the time of |                                   |
    |  the round equals,            |                                   |
    |  It is a merging of a branch. |                                   |
    |                               |                                   |
    |_______________________________|___________________________________|
                                     |                                     
                                     |             __________________________________________________________________________________________
                                     |            |  This graph is than created with the set of steps taking place at specific round.time,   |
                                     |            |  And occurs for every number outputted from the console, so for example we have 0.12     |
                                     |            |  The round.time begins at 1, and it's first STEP is 0x1, so it will multiply the number  |
                                     |            |  by itself, which is 0, and that is placed on A 0 on the graph, than we have one, A1.    |
                                     |            |  2*2 is 4, which is at 4D on the graph, and the round.time equals to about 3 steps.      |
                                      ------------|  If there are 2 or more same numbers going after each another, we write it as 2xn.       |
                                                  |  You get the idea, for each step an image is drawn, the images overlap. Roll the credits |
                                                  |__________________________________________________________________________________________|
                                             


(c)@V3RDAD 2022
